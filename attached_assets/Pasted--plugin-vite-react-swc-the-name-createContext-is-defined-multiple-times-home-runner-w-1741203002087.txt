[plugin:vite:react-swc] × the name `createContext` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:1:1]
   1 │ import React, { createContext, useState, useContext, useEffect } from "react";
     ·                 ──────┬──────
     ·                       ╰── previous definition of `createContext` here
   2 │ import { v4 as uuidv4 } from 'uuid';
   3 │ 
   4 │ // Mock user interfaces to simulate Supabase types
   5 │ interface User {
   6 │   id: string;
   7 │   email: string;
   8 │   user_metadata: {
   9 │     first_name?: string;
  10 │     last_name?: string;
  11 │     phone?: string;
  12 │     company?: string;
  13 │   };
  14 │ }
  15 │ 
  16 │ interface Session {
  17 │   user: User;
  18 │   access_token: string;
  19 │ }
  20 │ 
  21 │ interface AuthContextType {
  22 │   user: User | null;
  23 │   session: Session | null;
  24 │   loading: boolean;
  25 │   signIn: (email: string, password: string) => Promise<{
  26 │     error: any | null;
  27 │     data: any | null;
  28 │   }>;
  29 │   signUp: (email: string, password: string, metadata: any) => Promise<{
  30 │     error: any | null;
  31 │     data: any | null;
  32 │   }>;
  33 │   signOut: () => Promise<void>;
  34 │   userRole: string | null;
  35 │   isAdmin: boolean;
  36 │ }
  37 │ 
  38 │ const AuthContext = createContext<AuthContextType>({
  39 │   user: null,
  40 │   session: null,
  41 │   loading: true,
  42 │   signIn: async () => ({
  43 │     error: null,
  44 │     data: null,
  45 │   }),
  46 │   signUp: async () => ({
  47 │     error: null,
  48 │     data: null,
  49 │   }),
  50 │   signOut: async () => {},
  51 │   userRole: null,
  52 │   isAdmin: false,
  53 │ });
  54 │ 
  55 │ // Mock user for demo purposes
  56 │ const mockUser: User = {
  57 │   id: uuidv4(),
  58 │   email: 'demo@pavittar-pharma.com',
  59 │   user_metadata: {
  60 │     first_name: 'Rishul',
  61 │     last_name: 'Chanana',
  62 │     company: 'Pavittar Pharmaceuticals'
  63 │   }
  64 │ };
  65 │ 
  66 │ const mockSession: Session = {
  67 │   user: mockUser,
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
     ·                 ──────┬──────
     ·                       ╰── `createContext` redefined here
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
     ╰────
  × the name `useContext` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:1:1]
   1 │ import React, { createContext, useState, useContext, useEffect } from "react";
     ·                                          ─────┬────
     ·                                               ╰── previous definition of `useContext` here
   2 │ import { v4 as uuidv4 } from 'uuid';
   3 │ 
   4 │ // Mock user interfaces to simulate Supabase types
   5 │ interface User {
   6 │   id: string;
   7 │   email: string;
   8 │   user_metadata: {
   9 │     first_name?: string;
  10 │     last_name?: string;
  11 │     phone?: string;
  12 │     company?: string;
  13 │   };
  14 │ }
  15 │ 
  16 │ interface Session {
  17 │   user: User;
  18 │   access_token: string;
  19 │ }
  20 │ 
  21 │ interface AuthContextType {
  22 │   user: User | null;
  23 │   session: Session | null;
  24 │   loading: boolean;
  25 │   signIn: (email: string, password: string) => Promise<{
  26 │     error: any | null;
  27 │     data: any | null;
  28 │   }>;
  29 │   signUp: (email: string, password: string, metadata: any) => Promise<{
  30 │     error: any | null;
  31 │     data: any | null;
  32 │   }>;
  33 │   signOut: () => Promise<void>;
  34 │   userRole: string | null;
  35 │   isAdmin: boolean;
  36 │ }
  37 │ 
  38 │ const AuthContext = createContext<AuthContextType>({
  39 │   user: null,
  40 │   session: null,
  41 │   loading: true,
  42 │   signIn: async () => ({
  43 │     error: null,
  44 │     data: null,
  45 │   }),
  46 │   signUp: async () => ({
  47 │     error: null,
  48 │     data: null,
  49 │   }),
  50 │   signOut: async () => {},
  51 │   userRole: null,
  52 │   isAdmin: false,
  53 │ });
  54 │ 
  55 │ // Mock user for demo purposes
  56 │ const mockUser: User = {
  57 │   id: uuidv4(),
  58 │   email: 'demo@pavittar-pharma.com',
  59 │   user_metadata: {
  60 │     first_name: 'Rishul',
  61 │     last_name: 'Chanana',
  62 │     company: 'Pavittar Pharmaceuticals'
  63 │   }
  64 │ };
  65 │ 
  66 │ const mockSession: Session = {
  67 │   user: mockUser,
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
     ·                                ─────┬────
     ·                                     ╰── `useContext` redefined here
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
     ╰────
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:1:1]
   1 │ import React, { createContext, useState, useContext, useEffect } from "react";
     ·                                ────┬───
     ·                                    ╰── previous definition of `useState` here
   2 │ import { v4 as uuidv4 } from 'uuid';
   3 │ 
   4 │ // Mock user interfaces to simulate Supabase types
   5 │ interface User {
   6 │   id: string;
   7 │   email: string;
   8 │   user_metadata: {
   9 │     first_name?: string;
  10 │     last_name?: string;
  11 │     phone?: string;
  12 │     company?: string;
  13 │   };
  14 │ }
  15 │ 
  16 │ interface Session {
  17 │   user: User;
  18 │   access_token: string;
  19 │ }
  20 │ 
  21 │ interface AuthContextType {
  22 │   user: User | null;
  23 │   session: Session | null;
  24 │   loading: boolean;
  25 │   signIn: (email: string, password: string) => Promise<{
  26 │     error: any | null;
  27 │     data: any | null;
  28 │   }>;
  29 │   signUp: (email: string, password: string, metadata: any) => Promise<{
  30 │     error: any | null;
  31 │     data: any | null;
  32 │   }>;
  33 │   signOut: () => Promise<void>;
  34 │   userRole: string | null;
  35 │   isAdmin: boolean;
  36 │ }
  37 │ 
  38 │ const AuthContext = createContext<AuthContextType>({
  39 │   user: null,
  40 │   session: null,
  41 │   loading: true,
  42 │   signIn: async () => ({
  43 │     error: null,
  44 │     data: null,
  45 │   }),
  46 │   signUp: async () => ({
  47 │     error: null,
  48 │     data: null,
  49 │   }),
  50 │   signOut: async () => {},
  51 │   userRole: null,
  52 │   isAdmin: false,
  53 │ });
  54 │ 
  55 │ // Mock user for demo purposes
  56 │ const mockUser: User = {
  57 │   id: uuidv4(),
  58 │   email: 'demo@pavittar-pharma.com',
  59 │   user_metadata: {
  60 │     first_name: 'Rishul',
  61 │     last_name: 'Chanana',
  62 │     company: 'Pavittar Pharmaceuticals'
  63 │   }
  64 │ };
  65 │ 
  66 │ const mockSession: Session = {
  67 │   user: mockUser,
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
     ·                                            ────┬───
     ·                                                ╰── `useState` redefined here
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
     ╰────
  × the name `useEffect` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:1:1]
   1 │ import React, { createContext, useState, useContext, useEffect } from "react";
     ·                                                      ────┬────
     ·                                                          ╰── previous definition of `useEffect` here
   2 │ import { v4 as uuidv4 } from 'uuid';
   3 │ 
   4 │ // Mock user interfaces to simulate Supabase types
   5 │ interface User {
   6 │   id: string;
   7 │   email: string;
   8 │   user_metadata: {
   9 │     first_name?: string;
  10 │     last_name?: string;
  11 │     phone?: string;
  12 │     company?: string;
  13 │   };
  14 │ }
  15 │ 
  16 │ interface Session {
  17 │   user: User;
  18 │   access_token: string;
  19 │ }
  20 │ 
  21 │ interface AuthContextType {
  22 │   user: User | null;
  23 │   session: Session | null;
  24 │   loading: boolean;
  25 │   signIn: (email: string, password: string) => Promise<{
  26 │     error: any | null;
  27 │     data: any | null;
  28 │   }>;
  29 │   signUp: (email: string, password: string, metadata: any) => Promise<{
  30 │     error: any | null;
  31 │     data: any | null;
  32 │   }>;
  33 │   signOut: () => Promise<void>;
  34 │   userRole: string | null;
  35 │   isAdmin: boolean;
  36 │ }
  37 │ 
  38 │ const AuthContext = createContext<AuthContextType>({
  39 │   user: null,
  40 │   session: null,
  41 │   loading: true,
  42 │   signIn: async () => ({
  43 │     error: null,
  44 │     data: null,
  45 │   }),
  46 │   signUp: async () => ({
  47 │     error: null,
  48 │     data: null,
  49 │   }),
  50 │   signOut: async () => {},
  51 │   userRole: null,
  52 │   isAdmin: false,
  53 │ });
  54 │ 
  55 │ // Mock user for demo purposes
  56 │ const mockUser: User = {
  57 │   id: uuidv4(),
  58 │   email: 'demo@pavittar-pharma.com',
  59 │   user_metadata: {
  60 │     first_name: 'Rishul',
  61 │     last_name: 'Chanana',
  62 │     company: 'Pavittar Pharmaceuticals'
  63 │   }
  64 │ };
  65 │ 
  66 │ const mockSession: Session = {
  67 │   user: mockUser,
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
     ·                                                      ────┬────
     ·                                                          ╰── `useEffect` redefined here
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
     ╰────
  × the name `AuthContext` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:38:1]
  35 │   isAdmin: boolean;
  36 │ }
  37 │ 
  38 │ const AuthContext = createContext<AuthContextType>({
     ·       ─────┬─────
     ·            ╰── previous definition of `AuthContext` here
  39 │   user: null,
  40 │   session: null,
  41 │   loading: true,
  42 │   signIn: async () => ({
  43 │     error: null,
  44 │     data: null,
  45 │   }),
  46 │   signUp: async () => ({
  47 │     error: null,
  48 │     data: null,
  49 │   }),
  50 │   signOut: async () => {},
  51 │   userRole: null,
  52 │   isAdmin: false,
  53 │ });
  54 │ 
  55 │ // Mock user for demo purposes
  56 │ const mockUser: User = {
  57 │   id: uuidv4(),
  58 │   email: 'demo@pavittar-pharma.com',
  59 │   user_metadata: {
  60 │     first_name: 'Rishul',
  61 │     last_name: 'Chanana',
  62 │     company: 'Pavittar Pharmaceuticals'
  63 │   }
  64 │ };
  65 │ 
  66 │ const mockSession: Session = {
  67 │   user: mockUser,
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
 221 │   id: "trial-user-123",
 222 │   email: "trial@example.com",
 223 │   name: "Trial User",
 224 │   role: "trial"
 225 │ };
 226 │ 
 227 │ type AuthState = 'LOADING' | 'SIGNED_OUT' | 'SIGNED_IN' | 'TOKEN_REFRESHED';
 228 │ 
 229 │ interface AuthContextType {
 230 │   user: any | null;
 231 │   loading: boolean;
 232 │   authState: AuthState;
 233 │   signIn: (email: string, password: string) => Promise<void>;
 234 │   signOut: () => Promise<void>;
 235 │   signUp: (email: string, password: string) => Promise<void>;
 236 │   continueAsTrial: () => void;
 237 │   isTrialUser: boolean;
 238 │ }
 239 │ 
 240 │ const AuthContext = createContext<AuthContextType | undefined>(undefined);
     ·       ─────┬─────
     ·            ╰── `AuthContext` redefined here
 241 │ 
 242 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
 243 │   const [user, setUser] = useState<any | null>(null);
     ╰────
  × the name `AuthProvider` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:71:1]
  68 │   access_token: 'mock-token-for-demo'
  69 │ };
  70 │ 
  71 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
     ·              ──────┬─────
     ·                    ╰── previous definition of `AuthProvider` here
  72 │   children,
  73 │ }) => {
  74 │   const [user, setUser] = useState<User | null>(null);
  75 │   const [session, setSession] = useState<Session | null>(null);
  76 │   const [loading, setLoading] = useState(true);
  77 │   const [userRole, setUserRole] = useState<string | null>(null);
  78 │   const [isAdmin, setIsAdmin] = useState(false);
  79 │ 
  80 │   useEffect(() => {
  81 │     console.log('Fetching session...');
  82 │ 
  83 │     // Simulate fetching a session
  84 │     const fetchSession = async () => {
  85 │       // For demo, check if we have a stored auth state
  86 │       const storedAuth = localStorage.getItem('crm_auth');
  87 │ 
  88 │       if (storedAuth) {
  89 │         const parsedAuth = JSON.parse(storedAuth);
  90 │         setUser(parsedAuth.user);
  91 │         setSession(parsedAuth.session);
  92 │         setUserRole(parsedAuth.userRole);
  93 │         setIsAdmin(parsedAuth.isAdmin);
  94 │       } else {
  95 │         // Auto sign-in for demo purposes
  96 │         setUser(mockUser);
  97 │         setSession(mockSession);
  98 │         setUserRole('admin');
  99 │         setIsAdmin(true);
 100 │ 
 101 │         // Store auth state
 102 │         localStorage.setItem('crm_auth', JSON.stringify({
 103 │           user: mockUser,
 104 │           session: mockSession,
 105 │           userRole: 'admin',
 106 │           isAdmin: true
 107 │         }));
 108 │       }
 109 │ 
 110 │       // Simulate API delay
 111 │       setTimeout(() => {
 112 │         setLoading(false);
 113 │       }, 1000);
 114 │     };
 115 │ 
 116 │     fetchSession();
 117 │ 
 118 │     const timeoutId = setTimeout(() => {
 119 │       if (loading) {
 120 │         console.log('Auth check timeout reached, forcing loading to false');
 121 │         setLoading(false);
 122 │       }
 123 │     }, 5000);
 124 │ 
 125 │     return () => {
 126 │       clearTimeout(timeoutId);
 127 │     };
 128 │   }, []);
 129 │ 
 130 │   const signIn = async (email: string, password: string) => {
 131 │     // Simulate authentication for demo
 132 │     if (email && password) {
 133 │       const user = { ...mockUser, email };
 134 │       const session = { ...mockSession, user };
 135 │ 
 136 │       setUser(user);
 137 │       setSession(session);
 138 │       setUserRole('admin');
 139 │       setIsAdmin(true);
 140 │ 
 141 │       // Store auth state
 142 │       localStorage.setItem('crm_auth', JSON.stringify({
 143 │         user,
 144 │         session,
 145 │         userRole: 'admin',
 146 │         isAdmin: true
 147 │       }));
 148 │ 
 149 │       return { data: { user, session }, error: null };
 150 │     }
 151 │ 
 152 │     return { 
 153 │       data: null, 
 154 │       error: { message: 'Invalid email or password' } 
 155 │     };
 156 │   };
 157 │ 
 158 │   const signUp = async (email: string, password: string, metadata: any) => {
 159 │     // Simulate sign up for demo
 160 │     if (email && password) {
 161 │       const user = { 
 162 │         ...mockUser, 
 163 │         email, 
 164 │         user_metadata: metadata 
 165 │       };
 166 │       const session = { ...mockSession, user };
 167 │ 
 168 │       setUser(user);
 169 │       setSession(session);
 170 │       setUserRole('user');
 171 │       setIsAdmin(false);
 172 │ 
 173 │       // Store auth state
 174 │       localStorage.setItem('crm_auth', JSON.stringify({
 175 │         user,
 176 │         session,
 177 │         userRole: 'user',
 178 │         isAdmin: false
 179 │       }));
 180 │ 
 181 │       return { data: { user, session }, error: null };
 182 │     }
 183 │ 
 184 │     return { 
 185 │       data: null, 
 186 │       error: { message: 'Unable to create account' } 
 187 │     };
 188 │   };
 189 │ 
 190 │   const signOut = async () => {
 191 │     setUser(null);
 192 │     setSession(null);
 193 │     setUserRole(null);
 194 │     setIsAdmin(false);
 195 │     localStorage.removeItem('crm_auth');
 196 │   };
 197 │ 
 198 │   return (
 199 │     <AuthContext.Provider
 200 │       value={{
 201 │         user,
 202 │         session,
 203 │         loading,
 204 │         signIn,
 205 │         signUp,
 206 │         signOut,
 207 │         userRole,
 208 │         isAdmin,
 209 │       }}
 210 │     >
 211 │       {children}
 212 │     </AuthContext.Provider>
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
 221 │   id: "trial-user-123",
 222 │   email: "trial@example.com",
 223 │   name: "Trial User",
 224 │   role: "trial"
 225 │ };
 226 │ 
 227 │ type AuthState = 'LOADING' | 'SIGNED_OUT' | 'SIGNED_IN' | 'TOKEN_REFRESHED';
 228 │ 
 229 │ interface AuthContextType {
 230 │   user: any | null;
 231 │   loading: boolean;
 232 │   authState: AuthState;
 233 │   signIn: (email: string, password: string) => Promise<void>;
 234 │   signOut: () => Promise<void>;
 235 │   signUp: (email: string, password: string) => Promise<void>;
 236 │   continueAsTrial: () => void;
 237 │   isTrialUser: boolean;
 238 │ }
 239 │ 
 240 │ const AuthContext = createContext<AuthContextType | undefined>(undefined);
 241 │ 
 242 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
     ·              ──────┬─────
     ·                    ╰── `AuthProvider` redefined here
 243 │   const [user, setUser] = useState<any | null>(null);
 244 │   const [loading, setLoading] = useState(true);
 245 │   const [authState, setAuthState] = useState<AuthState>('LOADING');
     ╰────
  × the name `useAuth` is defined multiple times
     ╭─[/home/runner/workspace/src/context/AuthContext.tsx:216:1]
 213 │   );
 214 │ };
 215 │ 
 216 │ export const useAuth = () => useContext(AuthContext);
     ·              ───┬───
     ·                 ╰── previous definition of `useAuth` here
 217 │ import React, { createContext, useContext, useState, useEffect } from "react";
 218 │ 
 219 │ // Define mock trial user
 220 │ const TRIAL_USER = {
 221 │   id: "trial-user-123",
 222 │   email: "trial@example.com",
 223 │   name: "Trial User",
 224 │   role: "trial"
 225 │ };
 226 │ 
 227 │ type AuthState = 'LOADING' | 'SIGNED_OUT' | 'SIGNED_IN' | 'TOKEN_REFRESHED';
 228 │ 
 229 │ interface AuthContextType {
 230 │   user: any | null;
 231 │   loading: boolean;
 232 │   authState: AuthState;
 233 │   signIn: (email: string, password: string) => Promise<void>;
 234 │   signOut: () => Promise<void>;
 235 │   signUp: (email: string, password: string) => Promise<void>;
 236 │   continueAsTrial: () => void;
 237 │   isTrialUser: boolean;
 238 │ }
 239 │ 
 240 │ const AuthContext = createContext<AuthContextType | undefined>(undefined);
 241 │ 
 242 │ export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
 243 │   const [user, setUser] = useState<any | null>(null);
 244 │   const [loading, setLoading] = useState(true);
 245 │   const [authState, setAuthState] = useState<AuthState>('LOADING');
 246 │   const [isTrialUser, setIsTrialUser] = useState(false);
 247 │ 
 248 │   // Simulated auth functions
 249 │   const signIn = async (email: string, password: string) => {
 250 │     // Your existing sign in logic
 251 │     console.log("Signing in with:", email, password);
 252 │     setUser({ id: "1", email, name: "User" });
 253 │     setAuthState('SIGNED_IN');
 254 │   };
 255 │ 
 256 │   const signOut = async () => {
 257 │     // Your existing sign out logic
 258 │     console.log("Signing out");
 259 │     setUser(null);
 260 │     setIsTrialUser(false);
 261 │     setAuthState('SIGNED_OUT');
 262 │   };
 263 │ 
 264 │   const signUp = async (email: string, password: string) => {
 265 │     // Your existing sign up logic
 266 │     console.log("Signing up with:", email, password);
 267 │     setUser({ id: "1", email, name: "New User" });
 268 │     setAuthState('SIGNED_IN');
 269 │   };
 270 │ 
 271 │   const continueAsTrial = () => {
 272 │     console.log("Continuing as trial user");
 273 │     setUser(TRIAL_USER);
 274 │     setIsTrialUser(true);
 275 │     setAuthState('SIGNED_IN');
 276 │   };
 277 │ 
 278 │   useEffect(() => {
 279 │     const checkAuth = async () => {
 280 │       try {
 281 │         console.log("Fetching session...");
 282 │         // Your existing session check logic
 283 │         
 284 │         // For now we'll just simulate a signed out state
 285 │         setTimeout(() => {
 286 │           setAuthState('SIGNED_OUT');
 287 │           setLoading(false);
 288 │         }, 1000);
 289 │       } catch (error) {
 290 │         console.error("Auth error:", error);
 291 │         setAuthState('SIGNED_OUT');
 292 │         setLoading(false);
 293 │       }
 294 │     };
 295 │ 
 296 │     checkAuth();
 297 │ 
 298 │     // Force loading to false after a timeout to prevent infinite loading
 299 │     const timeout = setTimeout(() => {
 300 │       if (loading) {
 301 │         console.log("Auth check timeout reached, forcing loading to false");
 302 │         setLoading(false);
 303 │       }
 304 │     }, 5000);
 305 │ 
 306 │     return () => clearTimeout(timeout);
 307 │   }, []);
 308 │ 
 309 │   useEffect(() => {
 310 │     console.log("Auth state changed:", authState);
 311 │   }, [authState]);
 312 │ 
 313 │   return (
 314 │     <AuthContext.Provider value={{ 
 315 │       user, 
 316 │       loading, 
 317 │       authState, 
 318 │       signIn, 
 319 │       signOut, 
 320 │       signUp, 
 321 │       continueAsTrial,
 322 │       isTrialUser
 323 │     }}>
 324 │       {children}
 325 │     </AuthContext.Provider>
 326 │   );
 327 │ };
 328 │ 
 329 │ export const useAuth = () => {
     ·              ───┬───
     ·                 ╰── `useAuth` redefined here
 330 │   const context = useContext(AuthContext);
 331 │   if (context === undefined) {
 332 │     throw new Error("useAuth must be used within an AuthProvider");
     ╰────
/home/runner/workspace/src/context/AuthContext.tsx:1:1
1  |  import React, { createContext, useState, useContext, useEffect } from "react";
   |   ^
2  |  import { v4 as uuidv4 } from 'uuid';
3  |